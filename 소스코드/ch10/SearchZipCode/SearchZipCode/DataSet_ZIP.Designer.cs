//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:2.0.50727.42
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SearchZipCode {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet_ZIP")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet_ZIP : System.Data.DataSet {
        
        private zipcodeDataTable tablezipcode;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet_ZIP() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet_ZIP(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["zipcode"] != null)) {
                    base.Tables.Add(new zipcodeDataTable(ds.Tables["zipcode"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public zipcodeDataTable zipcode {
            get {
                return this.tablezipcode;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet_ZIP cln = ((DataSet_ZIP)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["zipcode"] != null)) {
                    base.Tables.Add(new zipcodeDataTable(ds.Tables["zipcode"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablezipcode = ((zipcodeDataTable)(base.Tables["zipcode"]));
            if ((initTable == true)) {
                if ((this.tablezipcode != null)) {
                    this.tablezipcode.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet_ZIP";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet_ZIP.xsd";
            this.Locale = new System.Globalization.CultureInfo("ko-KR");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablezipcode = new zipcodeDataTable();
            base.Tables.Add(this.tablezipcode);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializezipcode() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet_ZIP ds = new DataSet_ZIP();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void zipcodeRowChangeEventHandler(object sender, zipcodeRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class zipcodeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnnum;
            
            private System.Data.DataColumn columnzipcode;
            
            private System.Data.DataColumn columnaddr1;
            
            private System.Data.DataColumn columnaddr2;
            
            private System.Data.DataColumn columnaddr3;
            
            private System.Data.DataColumn columnno_start;
            
            private System.Data.DataColumn columnno_end;
            
            private System.Data.DataColumn columnaddr4;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zipcodeDataTable() {
                this.TableName = "zipcode";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal zipcodeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected zipcodeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numColumn {
                get {
                    return this.columnnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn zipcodeColumn {
                get {
                    return this.columnzipcode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn addr1Column {
                get {
                    return this.columnaddr1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn addr2Column {
                get {
                    return this.columnaddr2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn addr3Column {
                get {
                    return this.columnaddr3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn no_startColumn {
                get {
                    return this.columnno_start;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn no_endColumn {
                get {
                    return this.columnno_end;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn addr4Column {
                get {
                    return this.columnaddr4;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zipcodeRow this[int index] {
                get {
                    return ((zipcodeRow)(this.Rows[index]));
                }
            }
            
            public event zipcodeRowChangeEventHandler zipcodeRowChanging;
            
            public event zipcodeRowChangeEventHandler zipcodeRowChanged;
            
            public event zipcodeRowChangeEventHandler zipcodeRowDeleting;
            
            public event zipcodeRowChangeEventHandler zipcodeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddzipcodeRow(zipcodeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zipcodeRow AddzipcodeRow(int num, string zipcode, string addr1, string addr2, string addr3, string no_start, string no_end, string addr4) {
                zipcodeRow rowzipcodeRow = ((zipcodeRow)(this.NewRow()));
                rowzipcodeRow.ItemArray = new object[] {
                        num,
                        zipcode,
                        addr1,
                        addr2,
                        addr3,
                        no_start,
                        no_end,
                        addr4};
                this.Rows.Add(rowzipcodeRow);
                return rowzipcodeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zipcodeRow FindBynum(int num) {
                return ((zipcodeRow)(this.Rows.Find(new object[] {
                            num})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                zipcodeDataTable cln = ((zipcodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new zipcodeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnum = base.Columns["num"];
                this.columnzipcode = base.Columns["zipcode"];
                this.columnaddr1 = base.Columns["addr1"];
                this.columnaddr2 = base.Columns["addr2"];
                this.columnaddr3 = base.Columns["addr3"];
                this.columnno_start = base.Columns["no_start"];
                this.columnno_end = base.Columns["no_end"];
                this.columnaddr4 = base.Columns["addr4"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnum = new System.Data.DataColumn("num", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnum);
                this.columnzipcode = new System.Data.DataColumn("zipcode", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnzipcode);
                this.columnaddr1 = new System.Data.DataColumn("addr1", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddr1);
                this.columnaddr2 = new System.Data.DataColumn("addr2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddr2);
                this.columnaddr3 = new System.Data.DataColumn("addr3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddr3);
                this.columnno_start = new System.Data.DataColumn("no_start", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnno_start);
                this.columnno_end = new System.Data.DataColumn("no_end", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnno_end);
                this.columnaddr4 = new System.Data.DataColumn("addr4", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddr4);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnnum}, true));
                this.columnnum.AllowDBNull = false;
                this.columnnum.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zipcodeRow NewzipcodeRow() {
                return ((zipcodeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new zipcodeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(zipcodeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.zipcodeRowChanged != null)) {
                    this.zipcodeRowChanged(this, new zipcodeRowChangeEvent(((zipcodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.zipcodeRowChanging != null)) {
                    this.zipcodeRowChanging(this, new zipcodeRowChangeEvent(((zipcodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.zipcodeRowDeleted != null)) {
                    this.zipcodeRowDeleted(this, new zipcodeRowChangeEvent(((zipcodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.zipcodeRowDeleting != null)) {
                    this.zipcodeRowDeleting(this, new zipcodeRowChangeEvent(((zipcodeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovezipcodeRow(zipcodeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet_ZIP ds = new DataSet_ZIP();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "zipcodeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class zipcodeRow : System.Data.DataRow {
            
            private zipcodeDataTable tablezipcode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal zipcodeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablezipcode = ((zipcodeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int num {
                get {
                    return ((int)(this[this.tablezipcode.numColumn]));
                }
                set {
                    this[this.tablezipcode.numColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string zipcode {
                get {
                    try {
                        return ((string)(this[this.tablezipcode.zipcodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'zipcode\' 테이블의 \'zipcode\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablezipcode.zipcodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string addr1 {
                get {
                    try {
                        return ((string)(this[this.tablezipcode.addr1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'zipcode\' 테이블의 \'addr1\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablezipcode.addr1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string addr2 {
                get {
                    try {
                        return ((string)(this[this.tablezipcode.addr2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'zipcode\' 테이블의 \'addr2\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablezipcode.addr2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string addr3 {
                get {
                    try {
                        return ((string)(this[this.tablezipcode.addr3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'zipcode\' 테이블의 \'addr3\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablezipcode.addr3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string no_start {
                get {
                    try {
                        return ((string)(this[this.tablezipcode.no_startColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'zipcode\' 테이블의 \'no_start\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablezipcode.no_startColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string no_end {
                get {
                    try {
                        return ((string)(this[this.tablezipcode.no_endColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'zipcode\' 테이블의 \'no_end\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablezipcode.no_endColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string addr4 {
                get {
                    try {
                        return ((string)(this[this.tablezipcode.addr4Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("\'zipcode\' 테이블의 \'addr4\' 열의 값이 DBNull입니다.", e);
                    }
                }
                set {
                    this[this.tablezipcode.addr4Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IszipcodeNull() {
                return this.IsNull(this.tablezipcode.zipcodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetzipcodeNull() {
                this[this.tablezipcode.zipcodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaddr1Null() {
                return this.IsNull(this.tablezipcode.addr1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaddr1Null() {
                this[this.tablezipcode.addr1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaddr2Null() {
                return this.IsNull(this.tablezipcode.addr2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaddr2Null() {
                this[this.tablezipcode.addr2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaddr3Null() {
                return this.IsNull(this.tablezipcode.addr3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaddr3Null() {
                this[this.tablezipcode.addr3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isno_startNull() {
                return this.IsNull(this.tablezipcode.no_startColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setno_startNull() {
                this[this.tablezipcode.no_startColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isno_endNull() {
                return this.IsNull(this.tablezipcode.no_endColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setno_endNull() {
                this[this.tablezipcode.no_endColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaddr4Null() {
                return this.IsNull(this.tablezipcode.addr4Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaddr4Null() {
                this[this.tablezipcode.addr4Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class zipcodeRowChangeEvent : System.EventArgs {
            
            private zipcodeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zipcodeRowChangeEvent(zipcodeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public zipcodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591